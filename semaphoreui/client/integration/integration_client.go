// Code generated by go-swagger; DO NOT EDIT.

package integration

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new integration API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new integration API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new integration API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for integration API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// WithAcceptTextPlainCharsetUTF8 sets the Accept header to "text/plain; charset=utf-8".
func WithAcceptTextPlainCharsetUTF8(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"text/plain; charset=utf-8"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteProjectProjectIDIntegrationsIntegrationIDMatchersMatcherID(params *DeleteProjectProjectIDIntegrationsIntegrationIDMatchersMatcherIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteProjectProjectIDIntegrationsIntegrationIDMatchersMatcherIDNoContent, error)

	DeleteProjectProjectIDIntegrationsIntegrationIDValuesExtractvalueID(params *DeleteProjectProjectIDIntegrationsIntegrationIDValuesExtractvalueIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteProjectProjectIDIntegrationsIntegrationIDValuesExtractvalueIDNoContent, error)

	GetProjectProjectIDIntegrationsIntegrationIDMatchers(params *GetProjectProjectIDIntegrationsIntegrationIDMatchersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectProjectIDIntegrationsIntegrationIDMatchersOK, error)

	GetProjectProjectIDIntegrationsIntegrationIDValues(params *GetProjectProjectIDIntegrationsIntegrationIDValuesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectProjectIDIntegrationsIntegrationIDValuesOK, error)

	PutProjectProjectIDIntegrationsIntegrationIDMatchersMatcherID(params *PutProjectProjectIDIntegrationsIntegrationIDMatchersMatcherIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutProjectProjectIDIntegrationsIntegrationIDMatchersMatcherIDNoContent, error)

	PutProjectProjectIDIntegrationsIntegrationIDValuesExtractvalueID(params *PutProjectProjectIDIntegrationsIntegrationIDValuesExtractvalueIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutProjectProjectIDIntegrationsIntegrationIDValuesExtractvalueIDNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteProjectProjectIDIntegrationsIntegrationIDMatchersMatcherID removes integration matcher
*/
func (a *Client) DeleteProjectProjectIDIntegrationsIntegrationIDMatchersMatcherID(params *DeleteProjectProjectIDIntegrationsIntegrationIDMatchersMatcherIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteProjectProjectIDIntegrationsIntegrationIDMatchersMatcherIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProjectProjectIDIntegrationsIntegrationIDMatchersMatcherIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteProjectProjectIDIntegrationsIntegrationIDMatchersMatcherID",
		Method:             "DELETE",
		PathPattern:        "/project/{project_id}/integrations/{integration_id}/matchers/{matcher_id}",
		ProducesMediaTypes: []string{"application/json", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteProjectProjectIDIntegrationsIntegrationIDMatchersMatcherIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteProjectProjectIDIntegrationsIntegrationIDMatchersMatcherIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteProjectProjectIDIntegrationsIntegrationIDMatchersMatcherID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteProjectProjectIDIntegrationsIntegrationIDValuesExtractvalueID removes integration extract value
*/
func (a *Client) DeleteProjectProjectIDIntegrationsIntegrationIDValuesExtractvalueID(params *DeleteProjectProjectIDIntegrationsIntegrationIDValuesExtractvalueIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteProjectProjectIDIntegrationsIntegrationIDValuesExtractvalueIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProjectProjectIDIntegrationsIntegrationIDValuesExtractvalueIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteProjectProjectIDIntegrationsIntegrationIDValuesExtractvalueID",
		Method:             "DELETE",
		PathPattern:        "/project/{project_id}/integrations/{integration_id}/values/{extractvalue_id}",
		ProducesMediaTypes: []string{"application/json", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteProjectProjectIDIntegrationsIntegrationIDValuesExtractvalueIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteProjectProjectIDIntegrationsIntegrationIDValuesExtractvalueIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteProjectProjectIDIntegrationsIntegrationIDValuesExtractvalueID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetProjectProjectIDIntegrationsIntegrationIDMatchers gets integration matcher linked to integration extractor
*/
func (a *Client) GetProjectProjectIDIntegrationsIntegrationIDMatchers(params *GetProjectProjectIDIntegrationsIntegrationIDMatchersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectProjectIDIntegrationsIntegrationIDMatchersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectProjectIDIntegrationsIntegrationIDMatchersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetProjectProjectIDIntegrationsIntegrationIDMatchers",
		Method:             "GET",
		PathPattern:        "/project/{project_id}/integrations/{integration_id}/matchers",
		ProducesMediaTypes: []string{"application/json", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetProjectProjectIDIntegrationsIntegrationIDMatchersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProjectProjectIDIntegrationsIntegrationIDMatchersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetProjectProjectIDIntegrationsIntegrationIDMatchers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetProjectProjectIDIntegrationsIntegrationIDValues gets integration extracted values linked to integration extractor
*/
func (a *Client) GetProjectProjectIDIntegrationsIntegrationIDValues(params *GetProjectProjectIDIntegrationsIntegrationIDValuesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectProjectIDIntegrationsIntegrationIDValuesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectProjectIDIntegrationsIntegrationIDValuesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetProjectProjectIDIntegrationsIntegrationIDValues",
		Method:             "GET",
		PathPattern:        "/project/{project_id}/integrations/{integration_id}/values",
		ProducesMediaTypes: []string{"application/json", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetProjectProjectIDIntegrationsIntegrationIDValuesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProjectProjectIDIntegrationsIntegrationIDValuesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetProjectProjectIDIntegrationsIntegrationIDValues: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutProjectProjectIDIntegrationsIntegrationIDMatchersMatcherID updates integration matcher
*/
func (a *Client) PutProjectProjectIDIntegrationsIntegrationIDMatchersMatcherID(params *PutProjectProjectIDIntegrationsIntegrationIDMatchersMatcherIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutProjectProjectIDIntegrationsIntegrationIDMatchersMatcherIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutProjectProjectIDIntegrationsIntegrationIDMatchersMatcherIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutProjectProjectIDIntegrationsIntegrationIDMatchersMatcherID",
		Method:             "PUT",
		PathPattern:        "/project/{project_id}/integrations/{integration_id}/matchers/{matcher_id}",
		ProducesMediaTypes: []string{"application/json", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutProjectProjectIDIntegrationsIntegrationIDMatchersMatcherIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutProjectProjectIDIntegrationsIntegrationIDMatchersMatcherIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutProjectProjectIDIntegrationsIntegrationIDMatchersMatcherID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutProjectProjectIDIntegrationsIntegrationIDValuesExtractvalueID updates integration extract value
*/
func (a *Client) PutProjectProjectIDIntegrationsIntegrationIDValuesExtractvalueID(params *PutProjectProjectIDIntegrationsIntegrationIDValuesExtractvalueIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutProjectProjectIDIntegrationsIntegrationIDValuesExtractvalueIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutProjectProjectIDIntegrationsIntegrationIDValuesExtractvalueIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutProjectProjectIDIntegrationsIntegrationIDValuesExtractvalueID",
		Method:             "PUT",
		PathPattern:        "/project/{project_id}/integrations/{integration_id}/values/{extractvalue_id}",
		ProducesMediaTypes: []string{"application/json", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutProjectProjectIDIntegrationsIntegrationIDValuesExtractvalueIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutProjectProjectIDIntegrationsIntegrationIDValuesExtractvalueIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutProjectProjectIDIntegrationsIntegrationIDValuesExtractvalueID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
