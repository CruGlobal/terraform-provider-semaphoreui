// Code generated by go-swagger; DO NOT EDIT.

package project

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new project API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new project API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new project API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for project API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// WithAcceptTextPlainCharsetUTF8 sets the Accept header to "text/plain; charset=utf-8".
func WithAcceptTextPlainCharsetUTF8(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"text/plain; charset=utf-8"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	DeleteProjectProjectID(params *DeleteProjectProjectIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteProjectProjectIDNoContent, error)

	DeleteProjectProjectIDEnvironmentEnvironmentID(params *DeleteProjectProjectIDEnvironmentEnvironmentIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteProjectProjectIDEnvironmentEnvironmentIDNoContent, error)

	DeleteProjectProjectIDIntegrationsIntegrationID(params *DeleteProjectProjectIDIntegrationsIntegrationIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteProjectProjectIDIntegrationsIntegrationIDNoContent, error)

	DeleteProjectProjectIDInventoryInventoryID(params *DeleteProjectProjectIDInventoryInventoryIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteProjectProjectIDInventoryInventoryIDNoContent, error)

	DeleteProjectProjectIDKeysKeyID(params *DeleteProjectProjectIDKeysKeyIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteProjectProjectIDKeysKeyIDNoContent, error)

	DeleteProjectProjectIDRepositoriesRepositoryID(params *DeleteProjectProjectIDRepositoriesRepositoryIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteProjectProjectIDRepositoriesRepositoryIDNoContent, error)

	DeleteProjectProjectIDTasksTaskID(params *DeleteProjectProjectIDTasksTaskIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteProjectProjectIDTasksTaskIDNoContent, error)

	DeleteProjectProjectIDTemplatesTemplateID(params *DeleteProjectProjectIDTemplatesTemplateIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteProjectProjectIDTemplatesTemplateIDNoContent, error)

	DeleteProjectProjectIDUsersUserID(params *DeleteProjectProjectIDUsersUserIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteProjectProjectIDUsersUserIDNoContent, error)

	DeleteProjectProjectIDViewsViewID(params *DeleteProjectProjectIDViewsViewIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteProjectProjectIDViewsViewIDNoContent, error)

	GetProjectProjectID(params *GetProjectProjectIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectProjectIDOK, error)

	GetProjectProjectIDBackup(params *GetProjectProjectIDBackupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectProjectIDBackupOK, error)

	GetProjectProjectIDEnvironment(params *GetProjectProjectIDEnvironmentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectProjectIDEnvironmentOK, error)

	GetProjectProjectIDEnvironmentEnvironmentID(params *GetProjectProjectIDEnvironmentEnvironmentIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectProjectIDEnvironmentEnvironmentIDOK, error)

	GetProjectProjectIDEvents(params *GetProjectProjectIDEventsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectProjectIDEventsOK, error)

	GetProjectProjectIDIntegrations(params *GetProjectProjectIDIntegrationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectProjectIDIntegrationsOK, error)

	GetProjectProjectIDInventory(params *GetProjectProjectIDInventoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectProjectIDInventoryOK, error)

	GetProjectProjectIDInventoryInventoryID(params *GetProjectProjectIDInventoryInventoryIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectProjectIDInventoryInventoryIDOK, error)

	GetProjectProjectIDKeys(params *GetProjectProjectIDKeysParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectProjectIDKeysOK, error)

	GetProjectProjectIDRepositories(params *GetProjectProjectIDRepositoriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectProjectIDRepositoriesOK, error)

	GetProjectProjectIDRepositoriesRepositoryID(params *GetProjectProjectIDRepositoriesRepositoryIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectProjectIDRepositoriesRepositoryIDOK, error)

	GetProjectProjectIDRole(params *GetProjectProjectIDRoleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectProjectIDRoleOK, error)

	GetProjectProjectIDTasks(params *GetProjectProjectIDTasksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectProjectIDTasksOK, error)

	GetProjectProjectIDTasksLast(params *GetProjectProjectIDTasksLastParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectProjectIDTasksLastOK, error)

	GetProjectProjectIDTasksTaskID(params *GetProjectProjectIDTasksTaskIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectProjectIDTasksTaskIDOK, error)

	GetProjectProjectIDTasksTaskIDOutput(params *GetProjectProjectIDTasksTaskIDOutputParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectProjectIDTasksTaskIDOutputOK, error)

	GetProjectProjectIDTemplates(params *GetProjectProjectIDTemplatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectProjectIDTemplatesOK, error)

	GetProjectProjectIDTemplatesTemplateID(params *GetProjectProjectIDTemplatesTemplateIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectProjectIDTemplatesTemplateIDOK, error)

	GetProjectProjectIDUsers(params *GetProjectProjectIDUsersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectProjectIDUsersOK, error)

	GetProjectProjectIDViews(params *GetProjectProjectIDViewsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectProjectIDViewsOK, error)

	GetProjectProjectIDViewsViewID(params *GetProjectProjectIDViewsViewIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectProjectIDViewsViewIDOK, error)

	PostProjectProjectIDEnvironment(params *PostProjectProjectIDEnvironmentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostProjectProjectIDEnvironmentCreated, error)

	PostProjectProjectIDIntegrations(params *PostProjectProjectIDIntegrationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostProjectProjectIDIntegrationsCreated, error)

	PostProjectProjectIDIntegrationsIntegrationIDMatchers(params *PostProjectProjectIDIntegrationsIntegrationIDMatchersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostProjectProjectIDIntegrationsIntegrationIDMatchersOK, error)

	PostProjectProjectIDIntegrationsIntegrationIDValues(params *PostProjectProjectIDIntegrationsIntegrationIDValuesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostProjectProjectIDIntegrationsIntegrationIDValuesCreated, error)

	PostProjectProjectIDInventory(params *PostProjectProjectIDInventoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostProjectProjectIDInventoryCreated, error)

	PostProjectProjectIDKeys(params *PostProjectProjectIDKeysParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostProjectProjectIDKeysCreated, error)

	PostProjectProjectIDRepositories(params *PostProjectProjectIDRepositoriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostProjectProjectIDRepositoriesCreated, error)

	PostProjectProjectIDTasks(params *PostProjectProjectIDTasksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostProjectProjectIDTasksCreated, error)

	PostProjectProjectIDTasksTaskIDStop(params *PostProjectProjectIDTasksTaskIDStopParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostProjectProjectIDTasksTaskIDStopNoContent, error)

	PostProjectProjectIDTemplates(params *PostProjectProjectIDTemplatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostProjectProjectIDTemplatesCreated, error)

	PostProjectProjectIDUsers(params *PostProjectProjectIDUsersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostProjectProjectIDUsersNoContent, error)

	PostProjectProjectIDViews(params *PostProjectProjectIDViewsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostProjectProjectIDViewsCreated, error)

	PutProjectProjectID(params *PutProjectProjectIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutProjectProjectIDNoContent, error)

	PutProjectProjectIDEnvironmentEnvironmentID(params *PutProjectProjectIDEnvironmentEnvironmentIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutProjectProjectIDEnvironmentEnvironmentIDNoContent, error)

	PutProjectProjectIDIntegrationsIntegrationID(params *PutProjectProjectIDIntegrationsIntegrationIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutProjectProjectIDIntegrationsIntegrationIDNoContent, error)

	PutProjectProjectIDInventoryInventoryID(params *PutProjectProjectIDInventoryInventoryIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutProjectProjectIDInventoryInventoryIDNoContent, error)

	PutProjectProjectIDKeysKeyID(params *PutProjectProjectIDKeysKeyIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutProjectProjectIDKeysKeyIDNoContent, error)

	PutProjectProjectIDRepositoriesRepositoryID(params *PutProjectProjectIDRepositoriesRepositoryIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutProjectProjectIDRepositoriesRepositoryIDNoContent, error)

	PutProjectProjectIDTemplatesTemplateID(params *PutProjectProjectIDTemplatesTemplateIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutProjectProjectIDTemplatesTemplateIDNoContent, error)

	PutProjectProjectIDUsersUserID(params *PutProjectProjectIDUsersUserIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutProjectProjectIDUsersUserIDNoContent, error)

	PutProjectProjectIDViewsViewID(params *PutProjectProjectIDViewsViewIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutProjectProjectIDViewsViewIDNoContent, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
DeleteProjectProjectID deletes project
*/
func (a *Client) DeleteProjectProjectID(params *DeleteProjectProjectIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteProjectProjectIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProjectProjectIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteProjectProjectID",
		Method:             "DELETE",
		PathPattern:        "/project/{project_id}/",
		ProducesMediaTypes: []string{"application/json", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteProjectProjectIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteProjectProjectIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteProjectProjectID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteProjectProjectIDEnvironmentEnvironmentID removes environment
*/
func (a *Client) DeleteProjectProjectIDEnvironmentEnvironmentID(params *DeleteProjectProjectIDEnvironmentEnvironmentIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteProjectProjectIDEnvironmentEnvironmentIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProjectProjectIDEnvironmentEnvironmentIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteProjectProjectIDEnvironmentEnvironmentID",
		Method:             "DELETE",
		PathPattern:        "/project/{project_id}/environment/{environment_id}",
		ProducesMediaTypes: []string{"application/json", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteProjectProjectIDEnvironmentEnvironmentIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteProjectProjectIDEnvironmentEnvironmentIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteProjectProjectIDEnvironmentEnvironmentID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteProjectProjectIDIntegrationsIntegrationID removes integration
*/
func (a *Client) DeleteProjectProjectIDIntegrationsIntegrationID(params *DeleteProjectProjectIDIntegrationsIntegrationIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteProjectProjectIDIntegrationsIntegrationIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProjectProjectIDIntegrationsIntegrationIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteProjectProjectIDIntegrationsIntegrationID",
		Method:             "DELETE",
		PathPattern:        "/project/{project_id}/integrations/{integration_id}",
		ProducesMediaTypes: []string{"application/json", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteProjectProjectIDIntegrationsIntegrationIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteProjectProjectIDIntegrationsIntegrationIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteProjectProjectIDIntegrationsIntegrationID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteProjectProjectIDInventoryInventoryID removes inventory
*/
func (a *Client) DeleteProjectProjectIDInventoryInventoryID(params *DeleteProjectProjectIDInventoryInventoryIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteProjectProjectIDInventoryInventoryIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProjectProjectIDInventoryInventoryIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteProjectProjectIDInventoryInventoryID",
		Method:             "DELETE",
		PathPattern:        "/project/{project_id}/inventory/{inventory_id}",
		ProducesMediaTypes: []string{"application/json", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteProjectProjectIDInventoryInventoryIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteProjectProjectIDInventoryInventoryIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteProjectProjectIDInventoryInventoryID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteProjectProjectIDKeysKeyID removes access key
*/
func (a *Client) DeleteProjectProjectIDKeysKeyID(params *DeleteProjectProjectIDKeysKeyIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteProjectProjectIDKeysKeyIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProjectProjectIDKeysKeyIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteProjectProjectIDKeysKeyID",
		Method:             "DELETE",
		PathPattern:        "/project/{project_id}/keys/{key_id}",
		ProducesMediaTypes: []string{"application/json", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteProjectProjectIDKeysKeyIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteProjectProjectIDKeysKeyIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteProjectProjectIDKeysKeyID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteProjectProjectIDRepositoriesRepositoryID removes repository
*/
func (a *Client) DeleteProjectProjectIDRepositoriesRepositoryID(params *DeleteProjectProjectIDRepositoriesRepositoryIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteProjectProjectIDRepositoriesRepositoryIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProjectProjectIDRepositoriesRepositoryIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteProjectProjectIDRepositoriesRepositoryID",
		Method:             "DELETE",
		PathPattern:        "/project/{project_id}/repositories/{repository_id}",
		ProducesMediaTypes: []string{"application/json", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteProjectProjectIDRepositoriesRepositoryIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteProjectProjectIDRepositoriesRepositoryIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteProjectProjectIDRepositoriesRepositoryID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteProjectProjectIDTasksTaskID deletes task including output
*/
func (a *Client) DeleteProjectProjectIDTasksTaskID(params *DeleteProjectProjectIDTasksTaskIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteProjectProjectIDTasksTaskIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProjectProjectIDTasksTaskIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteProjectProjectIDTasksTaskID",
		Method:             "DELETE",
		PathPattern:        "/project/{project_id}/tasks/{task_id}",
		ProducesMediaTypes: []string{"application/json", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteProjectProjectIDTasksTaskIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteProjectProjectIDTasksTaskIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteProjectProjectIDTasksTaskID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteProjectProjectIDTemplatesTemplateID removes template
*/
func (a *Client) DeleteProjectProjectIDTemplatesTemplateID(params *DeleteProjectProjectIDTemplatesTemplateIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteProjectProjectIDTemplatesTemplateIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProjectProjectIDTemplatesTemplateIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteProjectProjectIDTemplatesTemplateID",
		Method:             "DELETE",
		PathPattern:        "/project/{project_id}/templates/{template_id}",
		ProducesMediaTypes: []string{"application/json", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteProjectProjectIDTemplatesTemplateIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteProjectProjectIDTemplatesTemplateIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteProjectProjectIDTemplatesTemplateID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteProjectProjectIDUsersUserID removes user from project
*/
func (a *Client) DeleteProjectProjectIDUsersUserID(params *DeleteProjectProjectIDUsersUserIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteProjectProjectIDUsersUserIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProjectProjectIDUsersUserIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteProjectProjectIDUsersUserID",
		Method:             "DELETE",
		PathPattern:        "/project/{project_id}/users/{user_id}",
		ProducesMediaTypes: []string{"application/json", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteProjectProjectIDUsersUserIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteProjectProjectIDUsersUserIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteProjectProjectIDUsersUserID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
DeleteProjectProjectIDViewsViewID removes view
*/
func (a *Client) DeleteProjectProjectIDViewsViewID(params *DeleteProjectProjectIDViewsViewIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteProjectProjectIDViewsViewIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProjectProjectIDViewsViewIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "DeleteProjectProjectIDViewsViewID",
		Method:             "DELETE",
		PathPattern:        "/project/{project_id}/views/{view_id}",
		ProducesMediaTypes: []string{"application/json", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteProjectProjectIDViewsViewIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteProjectProjectIDViewsViewIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for DeleteProjectProjectIDViewsViewID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetProjectProjectID fetches project
*/
func (a *Client) GetProjectProjectID(params *GetProjectProjectIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectProjectIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectProjectIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetProjectProjectID",
		Method:             "GET",
		PathPattern:        "/project/{project_id}/",
		ProducesMediaTypes: []string{"application/json", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetProjectProjectIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProjectProjectIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetProjectProjectID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetProjectProjectIDBackup backups a project
*/
func (a *Client) GetProjectProjectIDBackup(params *GetProjectProjectIDBackupParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectProjectIDBackupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectProjectIDBackupParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetProjectProjectIDBackup",
		Method:             "GET",
		PathPattern:        "/project/{project_id}/backup",
		ProducesMediaTypes: []string{"application/json", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetProjectProjectIDBackupReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProjectProjectIDBackupOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetProjectProjectIDBackup: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetProjectProjectIDEnvironment gets environment
*/
func (a *Client) GetProjectProjectIDEnvironment(params *GetProjectProjectIDEnvironmentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectProjectIDEnvironmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectProjectIDEnvironmentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetProjectProjectIDEnvironment",
		Method:             "GET",
		PathPattern:        "/project/{project_id}/environment",
		ProducesMediaTypes: []string{"application/json", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetProjectProjectIDEnvironmentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProjectProjectIDEnvironmentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetProjectProjectIDEnvironment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetProjectProjectIDEnvironmentEnvironmentID gets environment
*/
func (a *Client) GetProjectProjectIDEnvironmentEnvironmentID(params *GetProjectProjectIDEnvironmentEnvironmentIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectProjectIDEnvironmentEnvironmentIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectProjectIDEnvironmentEnvironmentIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetProjectProjectIDEnvironmentEnvironmentID",
		Method:             "GET",
		PathPattern:        "/project/{project_id}/environment/{environment_id}",
		ProducesMediaTypes: []string{"application/json", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetProjectProjectIDEnvironmentEnvironmentIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProjectProjectIDEnvironmentEnvironmentIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetProjectProjectIDEnvironmentEnvironmentID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetProjectProjectIDEvents gets events related to this project
*/
func (a *Client) GetProjectProjectIDEvents(params *GetProjectProjectIDEventsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectProjectIDEventsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectProjectIDEventsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetProjectProjectIDEvents",
		Method:             "GET",
		PathPattern:        "/project/{project_id}/events",
		ProducesMediaTypes: []string{"application/json", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetProjectProjectIDEventsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProjectProjectIDEventsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetProjectProjectIDEvents: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetProjectProjectIDIntegrations gets all integrations
*/
func (a *Client) GetProjectProjectIDIntegrations(params *GetProjectProjectIDIntegrationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectProjectIDIntegrationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectProjectIDIntegrationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetProjectProjectIDIntegrations",
		Method:             "GET",
		PathPattern:        "/project/{project_id}/integrations",
		ProducesMediaTypes: []string{"application/json", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetProjectProjectIDIntegrationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProjectProjectIDIntegrationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetProjectProjectIDIntegrations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetProjectProjectIDInventory gets inventory
*/
func (a *Client) GetProjectProjectIDInventory(params *GetProjectProjectIDInventoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectProjectIDInventoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectProjectIDInventoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetProjectProjectIDInventory",
		Method:             "GET",
		PathPattern:        "/project/{project_id}/inventory",
		ProducesMediaTypes: []string{"application/json", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetProjectProjectIDInventoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProjectProjectIDInventoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetProjectProjectIDInventory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetProjectProjectIDInventoryInventoryID gets inventory
*/
func (a *Client) GetProjectProjectIDInventoryInventoryID(params *GetProjectProjectIDInventoryInventoryIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectProjectIDInventoryInventoryIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectProjectIDInventoryInventoryIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetProjectProjectIDInventoryInventoryID",
		Method:             "GET",
		PathPattern:        "/project/{project_id}/inventory/{inventory_id}",
		ProducesMediaTypes: []string{"application/json", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetProjectProjectIDInventoryInventoryIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProjectProjectIDInventoryInventoryIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetProjectProjectIDInventoryInventoryID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetProjectProjectIDKeys gets access keys linked to project
*/
func (a *Client) GetProjectProjectIDKeys(params *GetProjectProjectIDKeysParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectProjectIDKeysOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectProjectIDKeysParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetProjectProjectIDKeys",
		Method:             "GET",
		PathPattern:        "/project/{project_id}/keys",
		ProducesMediaTypes: []string{"application/json", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetProjectProjectIDKeysReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProjectProjectIDKeysOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetProjectProjectIDKeys: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetProjectProjectIDRepositories gets repositories
*/
func (a *Client) GetProjectProjectIDRepositories(params *GetProjectProjectIDRepositoriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectProjectIDRepositoriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectProjectIDRepositoriesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetProjectProjectIDRepositories",
		Method:             "GET",
		PathPattern:        "/project/{project_id}/repositories",
		ProducesMediaTypes: []string{"application/json", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetProjectProjectIDRepositoriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProjectProjectIDRepositoriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetProjectProjectIDRepositories: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetProjectProjectIDRepositoriesRepositoryID gets repository
*/
func (a *Client) GetProjectProjectIDRepositoriesRepositoryID(params *GetProjectProjectIDRepositoriesRepositoryIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectProjectIDRepositoriesRepositoryIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectProjectIDRepositoriesRepositoryIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetProjectProjectIDRepositoriesRepositoryID",
		Method:             "GET",
		PathPattern:        "/project/{project_id}/repositories/{repository_id}",
		ProducesMediaTypes: []string{"application/json", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetProjectProjectIDRepositoriesRepositoryIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProjectProjectIDRepositoriesRepositoryIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetProjectProjectIDRepositoriesRepositoryID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetProjectProjectIDRole fetches permissions of the current user for project
*/
func (a *Client) GetProjectProjectIDRole(params *GetProjectProjectIDRoleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectProjectIDRoleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectProjectIDRoleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetProjectProjectIDRole",
		Method:             "GET",
		PathPattern:        "/project/{project_id}/role",
		ProducesMediaTypes: []string{"application/json", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetProjectProjectIDRoleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProjectProjectIDRoleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetProjectProjectIDRole: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetProjectProjectIDTasks gets tasks related to current project
*/
func (a *Client) GetProjectProjectIDTasks(params *GetProjectProjectIDTasksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectProjectIDTasksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectProjectIDTasksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetProjectProjectIDTasks",
		Method:             "GET",
		PathPattern:        "/project/{project_id}/tasks",
		ProducesMediaTypes: []string{"application/json", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetProjectProjectIDTasksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProjectProjectIDTasksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetProjectProjectIDTasks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetProjectProjectIDTasksLast gets last 200 tasks related to current project
*/
func (a *Client) GetProjectProjectIDTasksLast(params *GetProjectProjectIDTasksLastParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectProjectIDTasksLastOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectProjectIDTasksLastParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetProjectProjectIDTasksLast",
		Method:             "GET",
		PathPattern:        "/project/{project_id}/tasks/last",
		ProducesMediaTypes: []string{"application/json", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetProjectProjectIDTasksLastReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProjectProjectIDTasksLastOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetProjectProjectIDTasksLast: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetProjectProjectIDTasksTaskID gets a single task
*/
func (a *Client) GetProjectProjectIDTasksTaskID(params *GetProjectProjectIDTasksTaskIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectProjectIDTasksTaskIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectProjectIDTasksTaskIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetProjectProjectIDTasksTaskID",
		Method:             "GET",
		PathPattern:        "/project/{project_id}/tasks/{task_id}",
		ProducesMediaTypes: []string{"application/json", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetProjectProjectIDTasksTaskIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProjectProjectIDTasksTaskIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetProjectProjectIDTasksTaskID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetProjectProjectIDTasksTaskIDOutput gets task output
*/
func (a *Client) GetProjectProjectIDTasksTaskIDOutput(params *GetProjectProjectIDTasksTaskIDOutputParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectProjectIDTasksTaskIDOutputOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectProjectIDTasksTaskIDOutputParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetProjectProjectIDTasksTaskIDOutput",
		Method:             "GET",
		PathPattern:        "/project/{project_id}/tasks/{task_id}/output",
		ProducesMediaTypes: []string{"application/json", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetProjectProjectIDTasksTaskIDOutputReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProjectProjectIDTasksTaskIDOutputOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetProjectProjectIDTasksTaskIDOutput: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetProjectProjectIDTemplates gets template
*/
func (a *Client) GetProjectProjectIDTemplates(params *GetProjectProjectIDTemplatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectProjectIDTemplatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectProjectIDTemplatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetProjectProjectIDTemplates",
		Method:             "GET",
		PathPattern:        "/project/{project_id}/templates",
		ProducesMediaTypes: []string{"application/json", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetProjectProjectIDTemplatesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProjectProjectIDTemplatesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetProjectProjectIDTemplates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetProjectProjectIDTemplatesTemplateID gets template
*/
func (a *Client) GetProjectProjectIDTemplatesTemplateID(params *GetProjectProjectIDTemplatesTemplateIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectProjectIDTemplatesTemplateIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectProjectIDTemplatesTemplateIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetProjectProjectIDTemplatesTemplateID",
		Method:             "GET",
		PathPattern:        "/project/{project_id}/templates/{template_id}",
		ProducesMediaTypes: []string{"application/json", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetProjectProjectIDTemplatesTemplateIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProjectProjectIDTemplatesTemplateIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetProjectProjectIDTemplatesTemplateID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetProjectProjectIDUsers gets users linked to project
*/
func (a *Client) GetProjectProjectIDUsers(params *GetProjectProjectIDUsersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectProjectIDUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectProjectIDUsersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetProjectProjectIDUsers",
		Method:             "GET",
		PathPattern:        "/project/{project_id}/users",
		ProducesMediaTypes: []string{"application/json", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetProjectProjectIDUsersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProjectProjectIDUsersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetProjectProjectIDUsers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetProjectProjectIDViews gets view
*/
func (a *Client) GetProjectProjectIDViews(params *GetProjectProjectIDViewsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectProjectIDViewsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectProjectIDViewsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetProjectProjectIDViews",
		Method:             "GET",
		PathPattern:        "/project/{project_id}/views",
		ProducesMediaTypes: []string{"application/json", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetProjectProjectIDViewsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProjectProjectIDViewsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetProjectProjectIDViews: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetProjectProjectIDViewsViewID gets view
*/
func (a *Client) GetProjectProjectIDViewsViewID(params *GetProjectProjectIDViewsViewIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetProjectProjectIDViewsViewIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProjectProjectIDViewsViewIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "GetProjectProjectIDViewsViewID",
		Method:             "GET",
		PathPattern:        "/project/{project_id}/views/{view_id}",
		ProducesMediaTypes: []string{"application/json", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetProjectProjectIDViewsViewIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetProjectProjectIDViewsViewIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetProjectProjectIDViewsViewID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostProjectProjectIDEnvironment adds environment
*/
func (a *Client) PostProjectProjectIDEnvironment(params *PostProjectProjectIDEnvironmentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostProjectProjectIDEnvironmentCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostProjectProjectIDEnvironmentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostProjectProjectIDEnvironment",
		Method:             "POST",
		PathPattern:        "/project/{project_id}/environment",
		ProducesMediaTypes: []string{"application/json", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostProjectProjectIDEnvironmentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostProjectProjectIDEnvironmentCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostProjectProjectIDEnvironment: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostProjectProjectIDIntegrations creates a new integration
*/
func (a *Client) PostProjectProjectIDIntegrations(params *PostProjectProjectIDIntegrationsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostProjectProjectIDIntegrationsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostProjectProjectIDIntegrationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostProjectProjectIDIntegrations",
		Method:             "POST",
		PathPattern:        "/project/{project_id}/integrations",
		ProducesMediaTypes: []string{"application/json", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostProjectProjectIDIntegrationsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostProjectProjectIDIntegrationsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostProjectProjectIDIntegrations: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostProjectProjectIDIntegrationsIntegrationIDMatchers adds integration matcher
*/
func (a *Client) PostProjectProjectIDIntegrationsIntegrationIDMatchers(params *PostProjectProjectIDIntegrationsIntegrationIDMatchersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostProjectProjectIDIntegrationsIntegrationIDMatchersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostProjectProjectIDIntegrationsIntegrationIDMatchersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostProjectProjectIDIntegrationsIntegrationIDMatchers",
		Method:             "POST",
		PathPattern:        "/project/{project_id}/integrations/{integration_id}/matchers",
		ProducesMediaTypes: []string{"application/json", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostProjectProjectIDIntegrationsIntegrationIDMatchersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostProjectProjectIDIntegrationsIntegrationIDMatchersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostProjectProjectIDIntegrationsIntegrationIDMatchers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostProjectProjectIDIntegrationsIntegrationIDValues adds integration extracted value
*/
func (a *Client) PostProjectProjectIDIntegrationsIntegrationIDValues(params *PostProjectProjectIDIntegrationsIntegrationIDValuesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostProjectProjectIDIntegrationsIntegrationIDValuesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostProjectProjectIDIntegrationsIntegrationIDValuesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostProjectProjectIDIntegrationsIntegrationIDValues",
		Method:             "POST",
		PathPattern:        "/project/{project_id}/integrations/{integration_id}/values",
		ProducesMediaTypes: []string{"application/json", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostProjectProjectIDIntegrationsIntegrationIDValuesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostProjectProjectIDIntegrationsIntegrationIDValuesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostProjectProjectIDIntegrationsIntegrationIDValues: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostProjectProjectIDInventory creates inventory
*/
func (a *Client) PostProjectProjectIDInventory(params *PostProjectProjectIDInventoryParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostProjectProjectIDInventoryCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostProjectProjectIDInventoryParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostProjectProjectIDInventory",
		Method:             "POST",
		PathPattern:        "/project/{project_id}/inventory",
		ProducesMediaTypes: []string{"application/json", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostProjectProjectIDInventoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostProjectProjectIDInventoryCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostProjectProjectIDInventory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostProjectProjectIDKeys adds access key
*/
func (a *Client) PostProjectProjectIDKeys(params *PostProjectProjectIDKeysParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostProjectProjectIDKeysCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostProjectProjectIDKeysParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostProjectProjectIDKeys",
		Method:             "POST",
		PathPattern:        "/project/{project_id}/keys",
		ProducesMediaTypes: []string{"application/json", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostProjectProjectIDKeysReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostProjectProjectIDKeysCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostProjectProjectIDKeys: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostProjectProjectIDRepositories adds repository
*/
func (a *Client) PostProjectProjectIDRepositories(params *PostProjectProjectIDRepositoriesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostProjectProjectIDRepositoriesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostProjectProjectIDRepositoriesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostProjectProjectIDRepositories",
		Method:             "POST",
		PathPattern:        "/project/{project_id}/repositories",
		ProducesMediaTypes: []string{"application/json", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostProjectProjectIDRepositoriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostProjectProjectIDRepositoriesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostProjectProjectIDRepositories: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostProjectProjectIDTasks starts a job
*/
func (a *Client) PostProjectProjectIDTasks(params *PostProjectProjectIDTasksParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostProjectProjectIDTasksCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostProjectProjectIDTasksParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostProjectProjectIDTasks",
		Method:             "POST",
		PathPattern:        "/project/{project_id}/tasks",
		ProducesMediaTypes: []string{"application/json", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostProjectProjectIDTasksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostProjectProjectIDTasksCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostProjectProjectIDTasks: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostProjectProjectIDTasksTaskIDStop stops a job
*/
func (a *Client) PostProjectProjectIDTasksTaskIDStop(params *PostProjectProjectIDTasksTaskIDStopParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostProjectProjectIDTasksTaskIDStopNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostProjectProjectIDTasksTaskIDStopParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostProjectProjectIDTasksTaskIDStop",
		Method:             "POST",
		PathPattern:        "/project/{project_id}/tasks/{task_id}/stop",
		ProducesMediaTypes: []string{"application/json", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostProjectProjectIDTasksTaskIDStopReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostProjectProjectIDTasksTaskIDStopNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostProjectProjectIDTasksTaskIDStop: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostProjectProjectIDTemplates creates template
*/
func (a *Client) PostProjectProjectIDTemplates(params *PostProjectProjectIDTemplatesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostProjectProjectIDTemplatesCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostProjectProjectIDTemplatesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostProjectProjectIDTemplates",
		Method:             "POST",
		PathPattern:        "/project/{project_id}/templates",
		ProducesMediaTypes: []string{"application/json", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostProjectProjectIDTemplatesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostProjectProjectIDTemplatesCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostProjectProjectIDTemplates: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostProjectProjectIDUsers links user to project
*/
func (a *Client) PostProjectProjectIDUsers(params *PostProjectProjectIDUsersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostProjectProjectIDUsersNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostProjectProjectIDUsersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostProjectProjectIDUsers",
		Method:             "POST",
		PathPattern:        "/project/{project_id}/users",
		ProducesMediaTypes: []string{"application/json", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostProjectProjectIDUsersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostProjectProjectIDUsersNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostProjectProjectIDUsers: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PostProjectProjectIDViews creates view
*/
func (a *Client) PostProjectProjectIDViews(params *PostProjectProjectIDViewsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PostProjectProjectIDViewsCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostProjectProjectIDViewsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PostProjectProjectIDViews",
		Method:             "POST",
		PathPattern:        "/project/{project_id}/views",
		ProducesMediaTypes: []string{"application/json", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostProjectProjectIDViewsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PostProjectProjectIDViewsCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PostProjectProjectIDViews: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutProjectProjectID updates project
*/
func (a *Client) PutProjectProjectID(params *PutProjectProjectIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutProjectProjectIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutProjectProjectIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutProjectProjectID",
		Method:             "PUT",
		PathPattern:        "/project/{project_id}/",
		ProducesMediaTypes: []string{"application/json", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutProjectProjectIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutProjectProjectIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutProjectProjectID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutProjectProjectIDEnvironmentEnvironmentID updates environment
*/
func (a *Client) PutProjectProjectIDEnvironmentEnvironmentID(params *PutProjectProjectIDEnvironmentEnvironmentIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutProjectProjectIDEnvironmentEnvironmentIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutProjectProjectIDEnvironmentEnvironmentIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutProjectProjectIDEnvironmentEnvironmentID",
		Method:             "PUT",
		PathPattern:        "/project/{project_id}/environment/{environment_id}",
		ProducesMediaTypes: []string{"application/json", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutProjectProjectIDEnvironmentEnvironmentIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutProjectProjectIDEnvironmentEnvironmentIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutProjectProjectIDEnvironmentEnvironmentID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutProjectProjectIDIntegrationsIntegrationID updates integration
*/
func (a *Client) PutProjectProjectIDIntegrationsIntegrationID(params *PutProjectProjectIDIntegrationsIntegrationIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutProjectProjectIDIntegrationsIntegrationIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutProjectProjectIDIntegrationsIntegrationIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutProjectProjectIDIntegrationsIntegrationID",
		Method:             "PUT",
		PathPattern:        "/project/{project_id}/integrations/{integration_id}",
		ProducesMediaTypes: []string{"application/json", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutProjectProjectIDIntegrationsIntegrationIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutProjectProjectIDIntegrationsIntegrationIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutProjectProjectIDIntegrationsIntegrationID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutProjectProjectIDInventoryInventoryID updates inventory
*/
func (a *Client) PutProjectProjectIDInventoryInventoryID(params *PutProjectProjectIDInventoryInventoryIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutProjectProjectIDInventoryInventoryIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutProjectProjectIDInventoryInventoryIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutProjectProjectIDInventoryInventoryID",
		Method:             "PUT",
		PathPattern:        "/project/{project_id}/inventory/{inventory_id}",
		ProducesMediaTypes: []string{"application/json", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutProjectProjectIDInventoryInventoryIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutProjectProjectIDInventoryInventoryIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutProjectProjectIDInventoryInventoryID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutProjectProjectIDKeysKeyID updates access key
*/
func (a *Client) PutProjectProjectIDKeysKeyID(params *PutProjectProjectIDKeysKeyIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutProjectProjectIDKeysKeyIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutProjectProjectIDKeysKeyIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutProjectProjectIDKeysKeyID",
		Method:             "PUT",
		PathPattern:        "/project/{project_id}/keys/{key_id}",
		ProducesMediaTypes: []string{"application/json", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutProjectProjectIDKeysKeyIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutProjectProjectIDKeysKeyIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutProjectProjectIDKeysKeyID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutProjectProjectIDRepositoriesRepositoryID updates repository
*/
func (a *Client) PutProjectProjectIDRepositoriesRepositoryID(params *PutProjectProjectIDRepositoriesRepositoryIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutProjectProjectIDRepositoriesRepositoryIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutProjectProjectIDRepositoriesRepositoryIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutProjectProjectIDRepositoriesRepositoryID",
		Method:             "PUT",
		PathPattern:        "/project/{project_id}/repositories/{repository_id}",
		ProducesMediaTypes: []string{"application/json", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutProjectProjectIDRepositoriesRepositoryIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutProjectProjectIDRepositoriesRepositoryIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutProjectProjectIDRepositoriesRepositoryID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutProjectProjectIDTemplatesTemplateID updates template
*/
func (a *Client) PutProjectProjectIDTemplatesTemplateID(params *PutProjectProjectIDTemplatesTemplateIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutProjectProjectIDTemplatesTemplateIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutProjectProjectIDTemplatesTemplateIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutProjectProjectIDTemplatesTemplateID",
		Method:             "PUT",
		PathPattern:        "/project/{project_id}/templates/{template_id}",
		ProducesMediaTypes: []string{"application/json", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutProjectProjectIDTemplatesTemplateIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutProjectProjectIDTemplatesTemplateIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutProjectProjectIDTemplatesTemplateID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutProjectProjectIDUsersUserID updates user role
*/
func (a *Client) PutProjectProjectIDUsersUserID(params *PutProjectProjectIDUsersUserIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutProjectProjectIDUsersUserIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutProjectProjectIDUsersUserIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutProjectProjectIDUsersUserID",
		Method:             "PUT",
		PathPattern:        "/project/{project_id}/users/{user_id}",
		ProducesMediaTypes: []string{"application/json", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutProjectProjectIDUsersUserIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutProjectProjectIDUsersUserIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutProjectProjectIDUsersUserID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
PutProjectProjectIDViewsViewID updates view
*/
func (a *Client) PutProjectProjectIDViewsViewID(params *PutProjectProjectIDViewsViewIDParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*PutProjectProjectIDViewsViewIDNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutProjectProjectIDViewsViewIDParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "PutProjectProjectIDViewsViewID",
		Method:             "PUT",
		PathPattern:        "/project/{project_id}/views/{view_id}",
		ProducesMediaTypes: []string{"application/json", "text/plain; charset=utf-8"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutProjectProjectIDViewsViewIDReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PutProjectProjectIDViewsViewIDNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for PutProjectProjectIDViewsViewID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
