// Code generated by go-swagger; DO NOT EDIT.

package project

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"fmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"terraform-provider-semaphoreui/semaphoreui/models"
)

// PutProjectProjectIDReader is a Reader for the PutProjectProjectID structure.
type PutProjectProjectIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutProjectProjectIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewPutProjectProjectIDNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("[PUT /project/{project_id}/] PutProjectProjectID", response, response.Code())
	}
}

// NewPutProjectProjectIDNoContent creates a PutProjectProjectIDNoContent with default headers values
func NewPutProjectProjectIDNoContent() *PutProjectProjectIDNoContent {
	return &PutProjectProjectIDNoContent{}
}

/*
PutProjectProjectIDNoContent describes a response with status code 204, with default header values.

Project saved
*/
type PutProjectProjectIDNoContent struct {
}

// IsSuccess returns true when this put project project Id no content response has a 2xx status code
func (o *PutProjectProjectIDNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put project project Id no content response has a 3xx status code
func (o *PutProjectProjectIDNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put project project Id no content response has a 4xx status code
func (o *PutProjectProjectIDNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this put project project Id no content response has a 5xx status code
func (o *PutProjectProjectIDNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this put project project Id no content response a status code equal to that given
func (o *PutProjectProjectIDNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the put project project Id no content response
func (o *PutProjectProjectIDNoContent) Code() int {
	return 204
}

func (o *PutProjectProjectIDNoContent) Error() string {
	return fmt.Sprintf("[PUT /project/{project_id}/][%d] putProjectProjectIdNoContent", 204)
}

func (o *PutProjectProjectIDNoContent) String() string {
	return fmt.Sprintf("[PUT /project/{project_id}/][%d] putProjectProjectIdNoContent", 204)
}

func (o *PutProjectProjectIDNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
PutProjectProjectIDBody put project project ID body
swagger:model PutProjectProjectIDBody
*/
type PutProjectProjectIDBody struct {
	models.ProjectRequest

	// id
	// Minimum: 1
	ID int64 `json:"id,omitempty"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (o *PutProjectProjectIDBody) UnmarshalJSON(raw []byte) error {
	// PutProjectProjectIDParamsBodyAO0
	var putProjectProjectIDParamsBodyAO0 models.ProjectRequest
	if err := swag.ReadJSON(raw, &putProjectProjectIDParamsBodyAO0); err != nil {
		return err
	}
	o.ProjectRequest = putProjectProjectIDParamsBodyAO0

	// PutProjectProjectIDParamsBodyAO1
	var dataPutProjectProjectIDParamsBodyAO1 struct {
		ID int64 `json:"id,omitempty"`
	}
	if err := swag.ReadJSON(raw, &dataPutProjectProjectIDParamsBodyAO1); err != nil {
		return err
	}

	o.ID = dataPutProjectProjectIDParamsBodyAO1.ID

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (o PutProjectProjectIDBody) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	putProjectProjectIDParamsBodyAO0, err := swag.WriteJSON(o.ProjectRequest)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, putProjectProjectIDParamsBodyAO0)
	var dataPutProjectProjectIDParamsBodyAO1 struct {
		ID int64 `json:"id,omitempty"`
	}

	dataPutProjectProjectIDParamsBodyAO1.ID = o.ID

	jsonDataPutProjectProjectIDParamsBodyAO1, errPutProjectProjectIDParamsBodyAO1 := swag.WriteJSON(dataPutProjectProjectIDParamsBodyAO1)
	if errPutProjectProjectIDParamsBodyAO1 != nil {
		return nil, errPutProjectProjectIDParamsBodyAO1
	}
	_parts = append(_parts, jsonDataPutProjectProjectIDParamsBodyAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this put project project ID body
func (o *PutProjectProjectIDBody) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.ProjectRequest
	if err := o.ProjectRequest.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PutProjectProjectIDBody) validateID(formats strfmt.Registry) error {

	if swag.IsZero(o.ID) { // not required
		return nil
	}

	if err := validate.MinimumInt("Project"+"."+"id", "body", o.ID, 1, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this put project project ID body based on the context it is used
func (o *PutProjectProjectIDBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with models.ProjectRequest
	if err := o.ProjectRequest.ContextValidate(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (o *PutProjectProjectIDBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutProjectProjectIDBody) UnmarshalBinary(b []byte) error {
	var res PutProjectProjectIDBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
