// Code generated by go-swagger; DO NOT EDIT.

package project

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PutProjectProjectIDUsersUserIDReader is a Reader for the PutProjectProjectIDUsersUserID structure.
type PutProjectProjectIDUsersUserIDReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PutProjectProjectIDUsersUserIDReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewPutProjectProjectIDUsersUserIDNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("[PUT /project/{project_id}/users/{user_id}] PutProjectProjectIDUsersUserID", response, response.Code())
	}
}

// NewPutProjectProjectIDUsersUserIDNoContent creates a PutProjectProjectIDUsersUserIDNoContent with default headers values
func NewPutProjectProjectIDUsersUserIDNoContent() *PutProjectProjectIDUsersUserIDNoContent {
	return &PutProjectProjectIDUsersUserIDNoContent{}
}

/*
PutProjectProjectIDUsersUserIDNoContent describes a response with status code 204, with default header values.

User updated
*/
type PutProjectProjectIDUsersUserIDNoContent struct {
}

// IsSuccess returns true when this put project project Id users user Id no content response has a 2xx status code
func (o *PutProjectProjectIDUsersUserIDNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this put project project Id users user Id no content response has a 3xx status code
func (o *PutProjectProjectIDUsersUserIDNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this put project project Id users user Id no content response has a 4xx status code
func (o *PutProjectProjectIDUsersUserIDNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this put project project Id users user Id no content response has a 5xx status code
func (o *PutProjectProjectIDUsersUserIDNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this put project project Id users user Id no content response a status code equal to that given
func (o *PutProjectProjectIDUsersUserIDNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the put project project Id users user Id no content response
func (o *PutProjectProjectIDUsersUserIDNoContent) Code() int {
	return 204
}

func (o *PutProjectProjectIDUsersUserIDNoContent) Error() string {
	return fmt.Sprintf("[PUT /project/{project_id}/users/{user_id}][%d] putProjectProjectIdUsersUserIdNoContent", 204)
}

func (o *PutProjectProjectIDUsersUserIDNoContent) String() string {
	return fmt.Sprintf("[PUT /project/{project_id}/users/{user_id}][%d] putProjectProjectIdUsersUserIdNoContent", 204)
}

func (o *PutProjectProjectIDUsersUserIDNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

/*
PutProjectProjectIDUsersUserIDBody put project project ID users user ID body
swagger:model PutProjectProjectIDUsersUserIDBody
*/
type PutProjectProjectIDUsersUserIDBody struct {

	// role
	// Example: owner
	// Enum: ["owner","manager","task_runner","guest"]
	Role string `json:"role,omitempty"`
}

// Validate validates this put project project ID users user ID body
func (o *PutProjectProjectIDUsersUserIDBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var putProjectProjectIdUsersUserIdBodyTypeRolePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["owner","manager","task_runner","guest"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		putProjectProjectIdUsersUserIdBodyTypeRolePropEnum = append(putProjectProjectIdUsersUserIdBodyTypeRolePropEnum, v)
	}
}

const (

	// PutProjectProjectIDUsersUserIDBodyRoleOwner captures enum value "owner"
	PutProjectProjectIDUsersUserIDBodyRoleOwner string = "owner"

	// PutProjectProjectIDUsersUserIDBodyRoleManager captures enum value "manager"
	PutProjectProjectIDUsersUserIDBodyRoleManager string = "manager"

	// PutProjectProjectIDUsersUserIDBodyRoleTaskRunner captures enum value "task_runner"
	PutProjectProjectIDUsersUserIDBodyRoleTaskRunner string = "task_runner"

	// PutProjectProjectIDUsersUserIDBodyRoleGuest captures enum value "guest"
	PutProjectProjectIDUsersUserIDBodyRoleGuest string = "guest"
)

// prop value enum
func (o *PutProjectProjectIDUsersUserIDBody) validateRoleEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, putProjectProjectIdUsersUserIdBodyTypeRolePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (o *PutProjectProjectIDUsersUserIDBody) validateRole(formats strfmt.Registry) error {
	if swag.IsZero(o.Role) { // not required
		return nil
	}

	// value enum
	if err := o.validateRoleEnum("Project User"+"."+"role", "body", o.Role); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this put project project ID users user ID body based on context it is used
func (o *PutProjectProjectIDUsersUserIDBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PutProjectProjectIDUsersUserIDBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PutProjectProjectIDUsersUserIDBody) UnmarshalBinary(b []byte) error {
	var res PutProjectProjectIDUsersUserIDBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
