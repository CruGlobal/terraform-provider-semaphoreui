// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EnvironmentSecretRequest environment secret request
//
// swagger:model EnvironmentSecretRequest
type EnvironmentSecretRequest struct {

	// id
	ID int64 `json:"id,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// operation
	// Enum: ["create","update","delete"]
	Operation string `json:"operation,omitempty"`

	// secret
	Secret string `json:"secret,omitempty"`

	// type
	// Enum: ["env","var"]
	Type string `json:"type,omitempty"`
}

// Validate validates this environment secret request
func (m *EnvironmentSecretRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOperation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var environmentSecretRequestTypeOperationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["create","update","delete"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		environmentSecretRequestTypeOperationPropEnum = append(environmentSecretRequestTypeOperationPropEnum, v)
	}
}

const (

	// EnvironmentSecretRequestOperationCreate captures enum value "create"
	EnvironmentSecretRequestOperationCreate string = "create"

	// EnvironmentSecretRequestOperationUpdate captures enum value "update"
	EnvironmentSecretRequestOperationUpdate string = "update"

	// EnvironmentSecretRequestOperationDelete captures enum value "delete"
	EnvironmentSecretRequestOperationDelete string = "delete"
)

// prop value enum
func (m *EnvironmentSecretRequest) validateOperationEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, environmentSecretRequestTypeOperationPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *EnvironmentSecretRequest) validateOperation(formats strfmt.Registry) error {
	if swag.IsZero(m.Operation) { // not required
		return nil
	}

	// value enum
	if err := m.validateOperationEnum("operation", "body", m.Operation); err != nil {
		return err
	}

	return nil
}

var environmentSecretRequestTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["env","var"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		environmentSecretRequestTypeTypePropEnum = append(environmentSecretRequestTypeTypePropEnum, v)
	}
}

const (

	// EnvironmentSecretRequestTypeEnv captures enum value "env"
	EnvironmentSecretRequestTypeEnv string = "env"

	// EnvironmentSecretRequestTypeVar captures enum value "var"
	EnvironmentSecretRequestTypeVar string = "var"
)

// prop value enum
func (m *EnvironmentSecretRequest) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, environmentSecretRequestTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *EnvironmentSecretRequest) validateType(formats strfmt.Registry) error {
	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this environment secret request based on context it is used
func (m *EnvironmentSecretRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *EnvironmentSecretRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EnvironmentSecretRequest) UnmarshalBinary(b []byte) error {
	var res EnvironmentSecretRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
