// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IntegrationExtractValue integration extract value
//
// swagger:model IntegrationExtractValue
type IntegrationExtractValue struct {

	// body data type
	// Enum: ["json","xml","string"]
	BodyDataType string `json:"body_data_type,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// integration id
	IntegrationID int64 `json:"integration_id,omitempty"`

	// key
	// Example: key
	Key string `json:"key,omitempty"`

	// name
	// Example: extract this value
	Name string `json:"name,omitempty"`

	// value source
	// Enum: ["body","header"]
	ValueSource string `json:"value_source,omitempty"`

	// variable
	// Example: variable
	Variable string `json:"variable,omitempty"`
}

// Validate validates this integration extract value
func (m *IntegrationExtractValue) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBodyDataType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValueSource(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var integrationExtractValueTypeBodyDataTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["json","xml","string"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		integrationExtractValueTypeBodyDataTypePropEnum = append(integrationExtractValueTypeBodyDataTypePropEnum, v)
	}
}

const (

	// IntegrationExtractValueBodyDataTypeJSON captures enum value "json"
	IntegrationExtractValueBodyDataTypeJSON string = "json"

	// IntegrationExtractValueBodyDataTypeXML captures enum value "xml"
	IntegrationExtractValueBodyDataTypeXML string = "xml"

	// IntegrationExtractValueBodyDataTypeString captures enum value "string"
	IntegrationExtractValueBodyDataTypeString string = "string"
)

// prop value enum
func (m *IntegrationExtractValue) validateBodyDataTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, integrationExtractValueTypeBodyDataTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *IntegrationExtractValue) validateBodyDataType(formats strfmt.Registry) error {
	if swag.IsZero(m.BodyDataType) { // not required
		return nil
	}

	// value enum
	if err := m.validateBodyDataTypeEnum("body_data_type", "body", m.BodyDataType); err != nil {
		return err
	}

	return nil
}

var integrationExtractValueTypeValueSourcePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["body","header"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		integrationExtractValueTypeValueSourcePropEnum = append(integrationExtractValueTypeValueSourcePropEnum, v)
	}
}

const (

	// IntegrationExtractValueValueSourceBody captures enum value "body"
	IntegrationExtractValueValueSourceBody string = "body"

	// IntegrationExtractValueValueSourceHeader captures enum value "header"
	IntegrationExtractValueValueSourceHeader string = "header"
)

// prop value enum
func (m *IntegrationExtractValue) validateValueSourceEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, integrationExtractValueTypeValueSourcePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *IntegrationExtractValue) validateValueSource(formats strfmt.Registry) error {
	if swag.IsZero(m.ValueSource) { // not required
		return nil
	}

	// value enum
	if err := m.validateValueSourceEnum("value_source", "body", m.ValueSource); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this integration extract value based on context it is used
func (m *IntegrationExtractValue) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IntegrationExtractValue) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IntegrationExtractValue) UnmarshalBinary(b []byte) error {
	var res IntegrationExtractValue
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
