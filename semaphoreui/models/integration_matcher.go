// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IntegrationMatcher integration matcher
//
// swagger:model IntegrationMatcher
type IntegrationMatcher struct {

	// body data type
	// Enum: ["json","xml","string"]
	BodyDataType string `json:"body_data_type,omitempty"`

	// id
	ID int64 `json:"id,omitempty"`

	// integration id
	IntegrationID int64 `json:"integration_id,omitempty"`

	// key
	// Example: key
	Key string `json:"key,omitempty"`

	// match type
	// Enum: ["body","header"]
	MatchType string `json:"match_type,omitempty"`

	// method
	// Enum: ["equals","unequals","contains"]
	Method string `json:"method,omitempty"`

	// name
	// Example: deploy
	Name string `json:"name,omitempty"`

	// value
	// Example: value
	Value string `json:"value,omitempty"`
}

// Validate validates this integration matcher
func (m *IntegrationMatcher) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBodyDataType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMatchType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMethod(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var integrationMatcherTypeBodyDataTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["json","xml","string"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		integrationMatcherTypeBodyDataTypePropEnum = append(integrationMatcherTypeBodyDataTypePropEnum, v)
	}
}

const (

	// IntegrationMatcherBodyDataTypeJSON captures enum value "json"
	IntegrationMatcherBodyDataTypeJSON string = "json"

	// IntegrationMatcherBodyDataTypeXML captures enum value "xml"
	IntegrationMatcherBodyDataTypeXML string = "xml"

	// IntegrationMatcherBodyDataTypeString captures enum value "string"
	IntegrationMatcherBodyDataTypeString string = "string"
)

// prop value enum
func (m *IntegrationMatcher) validateBodyDataTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, integrationMatcherTypeBodyDataTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *IntegrationMatcher) validateBodyDataType(formats strfmt.Registry) error {
	if swag.IsZero(m.BodyDataType) { // not required
		return nil
	}

	// value enum
	if err := m.validateBodyDataTypeEnum("body_data_type", "body", m.BodyDataType); err != nil {
		return err
	}

	return nil
}

var integrationMatcherTypeMatchTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["body","header"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		integrationMatcherTypeMatchTypePropEnum = append(integrationMatcherTypeMatchTypePropEnum, v)
	}
}

const (

	// IntegrationMatcherMatchTypeBody captures enum value "body"
	IntegrationMatcherMatchTypeBody string = "body"

	// IntegrationMatcherMatchTypeHeader captures enum value "header"
	IntegrationMatcherMatchTypeHeader string = "header"
)

// prop value enum
func (m *IntegrationMatcher) validateMatchTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, integrationMatcherTypeMatchTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *IntegrationMatcher) validateMatchType(formats strfmt.Registry) error {
	if swag.IsZero(m.MatchType) { // not required
		return nil
	}

	// value enum
	if err := m.validateMatchTypeEnum("match_type", "body", m.MatchType); err != nil {
		return err
	}

	return nil
}

var integrationMatcherTypeMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["equals","unequals","contains"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		integrationMatcherTypeMethodPropEnum = append(integrationMatcherTypeMethodPropEnum, v)
	}
}

const (

	// IntegrationMatcherMethodEquals captures enum value "equals"
	IntegrationMatcherMethodEquals string = "equals"

	// IntegrationMatcherMethodUnequals captures enum value "unequals"
	IntegrationMatcherMethodUnequals string = "unequals"

	// IntegrationMatcherMethodContains captures enum value "contains"
	IntegrationMatcherMethodContains string = "contains"
)

// prop value enum
func (m *IntegrationMatcher) validateMethodEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, integrationMatcherTypeMethodPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *IntegrationMatcher) validateMethod(formats strfmt.Registry) error {
	if swag.IsZero(m.Method) { // not required
		return nil
	}

	// value enum
	if err := m.validateMethodEnum("method", "body", m.Method); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this integration matcher based on context it is used
func (m *IntegrationMatcher) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *IntegrationMatcher) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IntegrationMatcher) UnmarshalBinary(b []byte) error {
	var res IntegrationMatcher
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
