// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProjectRequest project request
//
// swagger:model ProjectRequest
type ProjectRequest struct {

	// alert
	Alert bool `json:"alert,omitempty"`

	// alert chat
	// Example: Test
	AlertChat string `json:"alert_chat,omitempty"`

	// Create Demo project resources?
	Demo bool `json:"demo,omitempty"`

	// max parallel tasks
	// Minimum: 0
	MaxParallelTasks *int64 `json:"max_parallel_tasks,omitempty"`

	// name
	// Example: Test
	Name string `json:"name,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this project request
func (m *ProjectRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMaxParallelTasks(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProjectRequest) validateMaxParallelTasks(formats strfmt.Registry) error {
	if swag.IsZero(m.MaxParallelTasks) { // not required
		return nil
	}

	if err := validate.MinimumInt("max_parallel_tasks", "body", *m.MaxParallelTasks, 0, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this project request based on context it is used
func (m *ProjectRequest) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *ProjectRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProjectRequest) UnmarshalBinary(b []byte) error {
	var res ProjectRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
